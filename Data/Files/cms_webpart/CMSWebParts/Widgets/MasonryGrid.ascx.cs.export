using CMS.DocumentEngine;
using CMS.Helpers;
using CMS.PortalEngine.Web.UI;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

public partial class CMSWebParts_Widgets_MasonryGrid : CMSAbstractWebPart
{
    private const string GRID_ITEM_CLASS_NAME = "Pods.GridItem";

    public bool HasSpacing
    {
        get
        {
            return ValidationHelper.GetBoolean(GetValue("HasSpacing"), false);
        }
        set
        {
            SetValue("HasSpacing", value);
        }
    }

    protected void SetupControl()
    {
        if (!StopProcessing)
        {
            var childNodes = new TreeProvider()
                .SelectNodes(CurrentSiteName, 
                            CurrentDocument.NodeAliasPath + "/%", 
                            "en-us", 
                            true, 
                            GRID_ITEM_CLASS_NAME, 
                            "", 
                            "NodeOrder ASC");

            if (childNodes != null && childNodes.Any())
            {
                var gridItems = new List<GridItemData>();
                foreach (var gridItem in childNodes)
                {
                    var targetUrl = gridItem.GetStringValue("TargetUrl", string.Empty);
                    var targetContent = gridItem.GetGuidValue("TargetContent", Guid.Empty);
                    var targetContentUrl = string.Empty;
                    if(!targetContent.Equals(Guid.Empty))
                        targetContentUrl = new TreeProvider().SelectSingleNode(targetContent, "en-us", CurrentSiteName).NodeAliasPath;

                    gridItems.Add(new GridItemData
                    {
                        Text = gridItem.GetStringValue("Text", string.Empty),
                        Image = gridItem.GetStringValue("Image", string.Empty),
                        Size = gridItem.GetStringValue("Size", string.Empty),
                        TargetUrl = targetContent.Equals(Guid.Empty) ? targetUrl : targetContentUrl,
                        ForceVisible = gridItem.GetBooleanValue("ForceVisible", false)
                    });
                }

                rptGridItems.DataSource = gridItems;
                rptGridItems.DataBind();
            }
        }
    }

    protected override void OnLoad(EventArgs e)
    {
        base.OnLoad(e);
        SetupControl();
    }

    public class GridItemData
    {
        public string Text { get; set; }
        public string Image { get; set; }
        public string Size { get; set; }
        public string TargetUrl { get; set; }
        public bool ForceVisible { get; set; }
    }
}